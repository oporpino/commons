#!/usr/bin/env bash

source "$(dirname "$0")/colors"

# Constants
export MAX_WIDTH=50

# Print functions
print() {
  local newline=1
  if [ "$1" = "-n" ]; then
    newline=0
    shift
  fi

  local color=""
  local text=""

  if [ $# -eq 1 ]; then
    text="$1"
  else
    color="$1"
    text="$2"
  fi

  if [ $newline -eq 0 ]; then
    echo -en "${color}${text}${NC}"
  else
    echo -e "${color}${text}${NC}"
  fi
}

print_bg() {
    local bg_color="$1"
    local text_color="$2"
    local text="$3"
    print "${bg_color}${text_color}" "$text"
}

print_info() {
    print "${BOLD_BLUE}" "[INFO] $1"
}

print_success() {
    print "${BOLD_GREEN}" "[SUCCESS] $1"
}

print_warning() {
    print "${BOLD_YELLOW}" "[WARNING] $1"
}

print_error() {
    print "${BOLD_RED}" "[ERROR] $1"
}

# Format functions
print_command() {
    local cmd="$1"
    local description="$2"
    printf "  ${BOLD_GREEN}%-15s${WHITE}%s${NC}\n" "$cmd" "$description"
}



h1() {
    print_double_box "$1"
}

h2() {
    local text="› $1"
    new_line
    print_lined "$text" "$BOLD_CYAN"
    new_line
}

h3() {
    local text="► $1"
    new_line
    print_dotted "$BOLD_BLUE" "$text"
    new_line
}

print_arrow() {
    local text="$1"
    new_line
    print "${BOLD_BLUE}► ${BOLD_WHITE}" "$text"
    new_line
}

print_bullet() {
    local text="• $1"
    new_line
    print "${BOLD_BLUE}${BOLD_WHITE}" "$text"
    new_line
}

print_subtitle() {
    local subtitle="$1"
    print "${BOLD_CYAN}" "$subtitle"
}

new_line() {
    echo
}

print_code() {
    local code="$1"
    print "${BOLD_WHITE}" "  $code"
}

# Box drawing
print_box() {
    local text="$1"
    local width=${2:-$MAX_WIDTH}
    # Subtract 2 to account for the box corners
    local box_width=$((width - 2))
    local padding=$(( (box_width - ${#text}) / 2 ))

    print "${BOLD_BLUE}" "┌$(printf '─%.0s' $(seq 1 $box_width))┐"
    print "${BOLD_BLUE}" "│$(printf ' %.0s' $(seq 1 $padding))${BOLD_WHITE}$text$(printf ' %.0s' $(seq 1 $((box_width - padding - ${#text}))))${BOLD_BLUE}│"
    print "${BOLD_BLUE}" "└$(printf '─%.0s' $(seq 1 $box_width))┘"
}

# Progress bar
print_progress() {
    local current="$1"
    local total="$2"
    local width=${3:-$MAX_WIDTH}
    local percentage=$((current * 100 / total))
    # Subtract 7 to account for "[", "]", " 100%" and spaces
    local bar_width=$((width - 7))
    local completed=$((bar_width * current / total))
    local remaining=$((bar_width - completed))

    printf "\r${BOLD_BLUE}["
    printf "${BOLD_GREEN}%${completed}s" | tr " " "█"
    printf "${BOLD_BLUE}%${remaining}s" | tr " " "░"
    printf "] %d%%" $percentage
    [ "$current" -eq "$total" ] && echo
}

print_indent() {
    local text="$1"
    print "" "  ${text}"
}

hr() {
    new_line
    local line=""
    for i in $(seq 1 $MAX_WIDTH); do
        line="${line}·"
    done
    print "${GRAY}" "$line"
    new_line
}

print_dotted() {
    local color="$1"
    local text="$2"
    print "${color}" "$text"
    local line=""
    for i in $(seq 1 $MAX_WIDTH); do
        line="${line}·"
    done
    print "${color}" "$line"
}

print_lined() {
    local text="$1"
    local color="$2"
    print "${color}" "$text"
    local clean_text=$(echo -e "$text" | sed 's/\x1B\[[0-9;]*[JKmsu]//g')
    local length=${#clean_text}
        printf "${color}%.0s─${NC}" $(seq 1 $MAX_WIDTH)
    echo
}

print_double_box() {
    local text="$1"
    new_line
    local box_width=$((MAX_WIDTH - 2))
    # Remove color codes for length calculation
    local clean_text=$(echo -e "$text" | sed 's/\x1B\[[0-9;]*[JKmsu]//g')
    local text_length=${#clean_text}
    local padding_left=1
    local padding_right=$((box_width - text_length - padding_left))
    print "${BOLD_BLUE}" "╔$(printf '═%.0s' $(seq 1 $box_width))╗"
    print -n "${BOLD_BLUE}" "║"
    printf "%${padding_left}s" ""
    print -n "${BOLD_WHITE}" "$text"
    printf "%${padding_right}s" ""
    print "${BOLD_BLUE}" "║"
    print "${BOLD_BLUE}" "╚$(printf '═%.0s' $(seq 1 $box_width))╝"
    new_line
}
