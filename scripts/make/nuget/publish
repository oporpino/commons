#!/bin/bash

set -e

NUGET_SOURCE="https://api.nuget.org/v3/index.json"

if [ ! -f ".env" ]; then
  echo "‚ùå .env file not found"
  exit 1
fi

source .env

if [ $# -lt 1 ]; then
  echo "Uso: $0 <MainProject> [DependencyProject1 DependencyProject2 ...]"
  exit 1
fi

PROJECTS=("$@")

# Move o principal (primeiro) para o final da lista
MAIN_PROJECT=${PROJECTS[0]}
DEPENDENCIES=("${PROJECTS[@]:1}")
PROJECTS=("${DEPENDENCIES[@]}" "$MAIN_PROJECT")

find_project_file() {
  local name=$1
  local path=$(find . -name "${name}.csproj" | head -n 1)
  if [ -z "$path" ]; then
    echo "‚ùå Projeto n√£o encontrado: $name"
    exit 1
  fi
  echo "$path"
}

get_package_id() {
  local csproj=$1
  grep -o "<PackageId>.*</PackageId>" "$csproj" | sed -E 's|<[^>]+>([^<]+)<[^>]+>|\1|'
}

get_version() {
  local csproj=$1
  grep -o "<Version>.*</Version>" "$csproj" | sed -E 's|<[^>]+>([^<]+)<[^>]+>|\1|'
}

get_latest_version_nuget() {
  local package_id=$1
  curl -s "https://api.nuget.org/v3-flatcontainer/${package_id}/index.json" | jq -r '.versions[-1]' || echo ""
}

increment_version() {
  IFS='.' read -r major minor patch <<< "$1"
  patch=$((patch + 1))
  echo "${major}.${minor}.${patch}"
}

update_version_in_csproj() {
  local csproj=$1
  local version=$2
  sed -i '' "s|<Version>.*</Version>|<Version>$version</Version>|" "$csproj"
}

clean_projects() {
  for proj in "${PROJECTS[@]}"; do
    local file=$(find_project_file "$proj")
    echo "üßπ Limpando $file"
    dotnet clean "$file" -c Release
  done
}

build_pack_projects() {
  local version=$1
  for proj in "${PROJECTS[@]}"; do
    local file=$(find_project_file "$proj")
    echo "üõ†Ô∏è Build & Pack $file (vers√£o $version)"
    dotnet build "$file" -c Release -p:Version="$version"
    dotnet pack "$file" -c Release -p:Version="$version"
  done
}

push_projects() {
  local version=$1
  for proj in "${PROJECTS[@]}"; do
    local file=$(find_project_file "$proj")
    local id=$(get_package_id "$file")
    local nupkg="$(dirname "$file")/bin/Release/${id}.${version}.nupkg"
    echo "üöÄ Publicando $nupkg"

    dotnet nuget push "$nupkg" --api-key "$NUGET_API_KEY" --source "$NUGET_SOURCE"
  done
}

# === Main ===

MAIN_FILE=$(find_project_file "$MAIN_PROJECT")
MAIN_ID=$(get_package_id "$MAIN_FILE")

LATEST_VERSION=$(get_latest_version_nuget "$MAIN_ID")

if [[ -z "$LATEST_VERSION" ]]; then
  echo "üöÄ Nenhuma vers√£o encontrada no NuGet, come√ßando em 0.0.1"
else
  echo "üîç √öltima vers√£o publicada no NuGet para $MAIN_ID √© $LATEST_VERSION"
fi

read -rp "Quer informar uma vers√£o? (enter para incrementar patch) " INPUT_VERSION

if [[ -n "$INPUT_VERSION" ]]; then
  NEW_VERSION=$INPUT_VERSION
else
  if [[ -z "$LATEST_VERSION" ]]; then
    NEW_VERSION="0.0.1"
  else
    NEW_VERSION=$(increment_version "$LATEST_VERSION")
  fi
fi

echo -e "\n=== Resumo ==="
echo "Vers√£o que ser√° publicada: $NEW_VERSION"
echo "Projetos:"
for proj in "${PROJECTS[@]}"; do
  file=$(find_project_file "$proj")
  id=$(get_package_id "$file")
  echo "- $proj (PackageId: $id)"
done

echo "Atualizando vers√£o: ${LATEST_VERSION:-'nenhuma'} -> $NEW_VERSION"

read -rp "Confirma para prosseguir? (s/n) " CONFIRM
if [[ "$CONFIRM" != "s" && "$CONFIRM" != "S" ]]; then
  echo "Aborted."
  exit 0
fi

for proj in "${PROJECTS[@]}"; do
  file=$(find_project_file "$proj")
  update_version_in_csproj "$file" "$NEW_VERSION"
done

clean_projects
build_pack_projects "$NEW_VERSION"
push_projects "$NEW_VERSION"

echo "‚úÖ Publica√ß√£o finalizada com sucesso!"
